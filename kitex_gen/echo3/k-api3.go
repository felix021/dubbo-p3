// Code generated by Kitex v0.8.0. DO NOT EDIT.

package echo3

import (
	"bytes"
	"fmt"
	"reflect"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"

	"github.com/felix021/dubbo-p3/kitex_gen/java"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = thrift.TProtocol(nil)
	_ = java.KitexUnusedProtection
)

type TestService3EchoArgs struct {
	Req *EchoRequest `thrift:"req,1" frugal:"1,default,EchoRequest" json:"req"`
}

func NewTestService3EchoArgs() *TestService3EchoArgs {
	return &TestService3EchoArgs{}
}

func (p *TestService3EchoArgs) InitDefault() {
	*p = TestService3EchoArgs{}
}

var TestService3EchoArgs_Req_DEFAULT *EchoRequest

func (p *TestService3EchoArgs) GetReq() (v *EchoRequest) {
	if !p.IsSetReq() {
		return TestService3EchoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TestService3EchoArgs) SetReq(val *EchoRequest) {
	p.Req = val
}

func (p *TestService3EchoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TestService3EchoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestService3EchoArgs(%+v)", *p)
}
func (p *TestService3EchoArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestService3EchoResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewTestService3EchoResult() *TestService3EchoResult {
	return &TestService3EchoResult{}
}

func (p *TestService3EchoResult) InitDefault() {
	*p = TestService3EchoResult{}
}

var TestService3EchoResult_Success_DEFAULT *EchoResponse

func (p *TestService3EchoResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return TestService3EchoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestService3EchoResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *TestService3EchoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestService3EchoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestService3EchoResult(%+v)", *p)
}
func (p *TestService3EchoResult) GetResult() interface{} {
	return p.Success
}
